Pass
{
    Name "StandardLit"
	Tags{"LightMode" = "LightweightForward"}
	${Tags}
	${Blending}
	${Culling}
	${ZTest}
	${ZWrite}

	// Enable grab pass
	GrabPass
	{
		"_GrabTex"
	}

	HLSLPROGRAM
    // Required to compile gles 2.0 with standard srp library
    #pragma prefer_hlslcc gles
	#pragma exclude_renderers d3d11_9x
	#pragma target 2.0

	// -------------------------------------
	// Lightweight Pipeline keywords
	#pragma multi_compile _ _ADDITIONAL_LIGHTS
	#pragma multi_compile _ _VERTEX_LIGHTS
	#pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE
	#pragma multi_compile _ _SHADOWS_ENABLED
    #pragma multi_compile _ _LOCAL_SHADOWS_ENABLED
    #pragma multi_compile _ _SHADOWS_SOFT

	// -------------------------------------
	// Unity defined keywords
	#pragma multi_compile _ DIRLIGHTMAP_COMBINED
	#pragma multi_compile _ LIGHTMAP_ON
	#pragma multi_compile_fog

	//--------------------------------------
	// GPU Instancing
	#pragma multi_compile_instancing

    #pragma vertex vert
	#pragma fragment frag

	${Defines}

	#include "LWRP/ShaderLibrary/Core.hlsl"
	#include "LWRP/ShaderLibrary/Lighting.hlsl"
	#include "CoreRP/ShaderLibrary/Color.hlsl"
	#include "CoreRP/ShaderLibrary/UnityInstancing.hlsl"
	#include "ShaderGraphLibrary/Functions.hlsl"

	${Graph}

	struct GraphVertexOutput
    {
        float4 clipPos                : SV_POSITION;
        DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
		half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
    	float4 shadowCoord            : TEXCOORD2;
        ${Interpolators}
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    GraphVertexOutput vert (GraphVertexInput v)
	{
	    v = PopulateVertexData(v);

        GraphVertexOutput o = (GraphVertexOutput)0;

        UNITY_SETUP_INSTANCE_ID(v);
    	UNITY_TRANSFER_INSTANCE_ID(v, o);

        ${VertexShader}

		float3 lwWNormal = TransformObjectToWorldNormal(v.normal);
		float3 lwWorldPos = TransformObjectToWorld(v.vertex.xyz);
		float4 clipPos = TransformWorldToHClip(lwWorldPos);

 		// We either sample GI from lightmap or SH.
	    // Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
        // see DECLARE_LIGHTMAP_OR_SH macro.
	    // The following funcions initialize the correct variable with correct data
	    OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
	    OUTPUT_SH(lwWNormal, o.vertexSH);

	    half3 vertexLight = VertexLighting(lwWorldPos, lwWNormal);
	    half fogFactor = ComputeFogFactor(clipPos.z);
	    o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
	    o.clipPos = clipPos;

	    #ifdef _SHADOWS_ENABLED
		#if SHADOWS_SCREEN
			o.shadowCoord = ComputeShadowCoord(clipPos);
		#else
			o.shadowCoord = TransformWorldToShadowCoord(lwWorldPos);
		#endif
		#endif
		
		return o;
	}

	// half4 LightingStandardToon(SurfaceOutputStandardToon s, half3 viewDir, UnityGI gi)
	// {
	// 	s.Normal = normalize(s.Normal);

	// 	// energy conservation
	// 	half oneMinusReflectivity;
	// 	s.Albedo = EnergyConservationBetweenDiffuseAndSpecular(s.Albedo, s.Specular, /*out*/ oneMinusReflectivity);

	// 	// shader relies on pre-multiply alpha-blend (_SrcBlend = One, _DstBlend = OneMinusSrcAlpha)
	// 	// this is necessary to handle transparency in physically correct way - only diffuse component gets affected by alpha
	// 	half outputAlpha;
	// 	s.Albedo = PreMultiplyAlpha(s.Albedo, s.Alpha, oneMinusReflectivity, /*out*/ outputAlpha);

	// 	half4 c = ToonBRDF(s.Albedo, s.Specular, oneMinusReflectivity, s.Smoothness, s.Normal, viewDir, gi.light, gi.indirect); // Call ToonBRDF expicitly
	// 	c.a = outputAlpha;
	// 	return c;
	// }

	struct ToonData
	{
		float3 FresnelTint;
		float FresnelStrength;
		float FresnelPower;
		float FresnelContribution;
		float Transmission;
	};

	inline void getToonData(float3 FresnelTint, float FresnelStrength, float FresnelPower, float FresnelContribution, float Transmission, out ToonData outToonData) {
		outToonData.FresnelTint = FresnelTint;
		outToonData.FresnelStrength = FresnelStrength;
		outToonData.FresnelPower = FresnelPower;
		outToonData.FresnelContribution = FresnelContribution;
		outToonData.Transmission = Transmission;
	}

	// Calculate an extra rimlight / fresnel effect for stylization
	half3 ToonBRDF_Fresnel(half3 diffColor, half3 viewDir, half3 normal, ToonData toonData)
	{
		if (_Fresnel == 1) // If fresnel is enabled
		{
			half rim = 1.0 - saturate(dot(normalize(viewDir), normal)); // Rim is one minus NdotL
			half3 fresnelColor = lerp(half3(.5, .5, .5), diffColor, toonData.FresnelContribution); // Calculate fresnel color based on diffuse contribution
			half fresnelPower = pow(rim, 20 - (toonData.FresnelPower * 20)); // Calculate fresnel power based on user property and rim
			half3 fresnel = fresnelColor * fresnelPower; // Multiply color by power
			return ((toonData.FresnelStrength * 5) * fresnel) * toonData.FresnelTint; // Return tinted and faded fresnel
		}
		else
			return half3(0, 0, 0); // Return zero
	}

	// Calculate indirect lighting
	// half3 ToonBRDF_Indirect(half3 diffColor, half3 specColor, UnityIndirect indirect, half grazingTerm, half fresnelTerm)
	// {
	// 	half3 c = indirect.diffuse * diffColor; // Calculate indirect diffuse color
	// 	c += indirect.specular * lerp(specColor, grazingTerm, fresnelTerm); // Add specular multiplied by fresnel
	// 	return c; // Return
	// }

	// Calculate classic wrapped diffuse
	// - TODO: Stepped transmission is not energy conservative
	half3 ToonBRDF_Diffuse(half3 diffColor, half3 lightDir, half3 normal, float3 lightColor, ToonData toonData)
	{
		lightDir = normalize(lightDir); // Normalize light direction
		float3 diffuse = saturate((dot(normal, lightDir) + toonData.Transmission) / ((1 + toonData.Transmission) * (1 + toonData.Transmission))); // Wrap diffuse based on transmission
		diffuse = min((round(diffuse * 2) / 2) + toonData.Transmission, 1);
		//diffuse = min(step(0.01, diffuse) + (_Transmission), 1); // Step the diffuse term and rebalance zero area to simulate transmission
		return diffuse * lightColor; // Return diffuse multiplied by light color
	}

	// Main BRDF
	// - Based on the same not microfacet based Modified Normalized Blinn-Phong BRDF as Unity_BRDF3
	// - Implementation uses Lookup texture for performance
	// - Normalized BlinnPhong in RDF form
	// - Implicit Visibility term
	half4 ToonBRDF(BRDFData brdfData, ToonData toonData, Light light, half3 normal, half3 viewDir)
	{
		half3 reflDir = reflect(viewDir, normal); // Calculate reflection vector
		half nl = saturate(dot(normal, light.direction)); // Calculate nDotL
		half nv = saturate(dot(normal, viewDir)); // Calculate NdotV

		// Vectorize Pow4 to save instructions
		half2 rlPow4AndFresnelTerm = Pow4(half2(dot(reflDir, light.direction), 1 - nv));  // use R.L instead of N.H to save couple of instructions
		half rlPow4 = rlPow4AndFresnelTerm.x; // power exponent must match kHorizontalWarpExp in NHxRoughness() function in GeneratedTextures.cpp
		half fresnelTerm = rlPow4AndFresnelTerm.y;

		half NdotL = saturate(dot(normal, light.direction));
		half3 radiance = light.color * (light.attenuation * NdotL);

		half3 specular = DirectBDRF(brdfData, normal, light.direction, viewDir) * radiance; // Calculate specular
		half3 diffuse = ToonBRDF_Diffuse(brdfData.diffuse, light.direction, normal, light.color, toonData); // Calculate diffuse
		half3 fresnel = ToonBRDF_Fresnel(brdfData.diffuse, viewDir, normal, toonData); // Calculate fresnel/rimlight

		//half3 indirect = ToonBRDF_Indirect(brdfData.diffuse, brdfData.specular, gi, brdfData.grazingTerm, fresnelTerm); // Calculate indirect

		// Compose output
		half3 color = (brdfData.diffuse + specular) * diffuse
			+ fresnel;
			//+ indirect;

		return half4(color, 1); // Return
	}

	half3 CustomLightingPhysicallyBased(BRDFData brdfData, ToonData toonData, Light light, half3 normalWS, half3 viewDirectionWS)
	{
		//half3 halfDir = Unity_SafeNormalize(lightDirectionWS + viewDirectionWS); 
		//half NdotL = saturate(dot(normalWS, lightDirectionWS));
		//half3 radiance = lightColor * (lightAttenuation * NdotL);
		//return DirectBDRF(brdfData, normalWS, lightDirectionWS, viewDirectionWS) * radiance;
		//half oneMinusReflectivity;
		//brdfData.diffuse = EnergyConservationBetweenDiffuseAndSpecular(brdfData.diffuse, brdfData.specular, /*out*/ oneMinusReflectivity);
		return ToonBRDF(brdfData, toonData, light, normalWS, viewDirectionWS); // Call ToonBRDF expicitly
	}
	half4 CustomLightweightFragmentPBR(InputData inputData, half3 albedo, half metallic, half3 specular, half smoothness, half occlusion, half3 emission, half alpha, ToonData toonData)
	{
		BRDFData brdfData;
		InitializeBRDFData(albedo, metallic, specular, smoothness, alpha, brdfData);

		Light mainLight = GetMainLight(inputData.positionWS);

		mainLight.attenuation *= RealtimeShadowAttenuation(inputData.shadowCoord);

		MixRealtimeAndBakedGI(mainLight, inputData.normalWS, inputData.bakedGI, half4(0, 0, 0, 0));
		half3 color = GlobalIllumination(brdfData, inputData.bakedGI, occlusion, inputData.normalWS, inputData.viewDirectionWS);
		color += CustomLightingPhysicallyBased(brdfData, toonData, mainLight, inputData.normalWS, inputData.viewDirectionWS);

	#ifdef _ADDITIONAL_LIGHTS
		int pixelLightCount = GetPixelLightCount();
		for (int i = 0; i < pixelLightCount; ++i)
		{
			Light light = GetLight(i, inputData.positionWS);
			color += CustomLightingPhysicallyBased(brdfData, toonData, light, inputData.normalWS, inputData.viewDirectionWS);
		}
	#endif

		color += inputData.vertexLighting * brdfData.diffuse;
		color += emission;
		return half4(color, alpha);
	}

	half4 frag (GraphVertexOutput IN) : SV_Target
    {
    	UNITY_SETUP_INSTANCE_ID(IN);

    	${LocalPixelShader}

        SurfaceInputs surfaceInput = (SurfaceInputs)0;
        ${SurfaceInputs}

        SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

		float3 Albedo = float3(0.5, 0.5, 0.5);
		float3 Specular = float3(0, 0, 0);
		float Metallic = 1;
		float3 Normal = float3(0, 0, 1);
		float3 Emission = 0;
		float Smoothness = 0.5;
		float Occlusion = 1;
		float Alpha = 1;
		float AlphaClipThreshold = 0;
		float3 FresnelTint = float3(0, 0, 0);
		float FresnelStrength = 0;
		float FresnelPower = 0;
		float FresnelContribution = 0;
		float Transmission = 0;

        ${SurfaceOutputRemap}

		InputData inputData;
		inputData.positionWS = WorldSpacePosition;

#ifdef _NORMALMAP
	    inputData.normalWS = TangentToWorldNormal(Normal, WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal);
#else
    #if !SHADER_HINT_NICE_QUALITY
        inputData.normalWS = WorldSpaceNormal;
    #else
	    inputData.normalWS = normalize(WorldSpaceNormal);
    #endif
#endif

#if !SHADER_HINT_NICE_QUALITY
	    // viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
	    inputData.viewDirectionWS = WorldSpaceViewDirection;
#else
	    inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
#endif

	    inputData.shadowCoord = IN.shadowCoord;

	    inputData.fogCoord = IN.fogFactorAndVertexLight.x;
	    inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
	    inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

		ToonData toonData;
		getToonData(FresnelTint, FresnelStrength, FresnelPower, FresnelContribution, Transmission, toonData);

		half4 color = CustomLightweightFragmentPBR(
			inputData, 
			Albedo, 
			Metallic, 
			Specular, 
			Smoothness, 
			Occlusion, 
			Emission, 
			Alpha,
			toonData);

		// Computes fog factor per-vertex
    	ApplyFog(color.rgb, IN.fogFactorAndVertexLight.x);

#if _AlphaClip
		clip(Alpha - AlphaClipThreshold);
#endif
		return color;
    }

	ENDHLSL
}